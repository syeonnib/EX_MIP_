<?xml version="1.0"?>
<!--
Software License Agreement (BSD)

\file      rover_dbw_os1_wg.launch
\authors   Wil Selby <accounts@wilselby.com>
\copyright Copyright (c) 2017, All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that
the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this list of conditions and the
   following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the 
   following disclaimer in the documentation and/or other materials provided with the distribution.
 * The name of the contributors may not be used to endorse or promote products derived from this software 
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WAR-
RANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, IN-
DIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<launch>

  <arg name="display_cam" default="false" />
  <arg name="record_cam" default="false" />
  <arg name="camera_enabled" default="true" />
  <arg name="laser_enabled" default="false"/>
  <arg name="ur5_enabled" default="false"/>
  <arg name="kinect_enabled" default="false"/>
  <arg name="os1-64_enabled" default="true"/>
  <arg name="rviz" default="false" doc="whether to run RVIZ"/>

<!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
<!-- world_name is wrt GAZEBO_RESOURCE_PATH environment variable -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rover_gazebo)/worlds/willowgarage.world"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>

  <!-- Spawn Rover Model -->
  <include file="$(find rover_gazebo)/launch/spawn/spawn_rover_outdoor.launch"> 
   <arg name="camera_enabled" value="$(arg camera_enabled)"/>
   <arg name="laser_enabled" value="$(arg laser_enabled)"/>
   <arg name="ur5_enabled" value="$(arg ur5_enabled)"/>
   <arg name="kinect_enabled" value="$(arg kinect_enabled)"/>
   <arg name="os1-64_enabled" value="$(arg os1-64_enabled)"/>
  </include>

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ></node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <!-- Load Keybaord/Joystick node  -->
  <include file="$(find rover_teleop)/launch/rover_teleop.launch">
    <arg name="max_linear_vel" value="0.2" />
  </include>

  <!-- Load Rover Control information -->
  <include file="$(find rover_control)/launch/rover_control_gazebo.launch"/> 

  <!-- Fake laser-->
  <include file="$(find rover_2dnav)/launch/include/pointcloud_to_laserscan.launch"/>

  <!-- Run Google Carographer to create 2-D Occupancy Grid Map-->
<!--   <include file="$(find rover_2dnav)/cartographer_ros/launch/rover_2d.launch"/>  -->

  <!-- Load a Map  -->
  <node name="map_server" pkg="map_server" type="map_server" args=" $(find rover_2dnav)/maps/wg_map.yaml" />

   <!-- Load AMCL  -->
 <include file="$(find rover_2dnav)/launch/include/rover_amcl.launch" >
  </include>

  <!-- Load Navigation Stack  -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <param name="controller_frequency" value="10"/>
    <remap from="odom" to="/odometry/filtered" /> 
    <remap from="/cmd_vel" to="/platform_control/cmd_vel"/> 
    <rosparam file="$(find rover_2dnav)/planning/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find rover_2dnav)/planning/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find rover_2dnav)/planning/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find rover_2dnav)/planning/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find rover_2dnav)/planning/base_local_planner_params.yaml" command="load" unless="$(arg teb)" />
    <rosparam file="$(find rover_2dnav)/planning/base_local_planner_params_teb.yaml" command="load" if="$(arg teb)" />
    <rosparam file="$(find rover_2dnav)/planning/move_base_params.yaml" command="load" if="$(arg teb)"/>

    <!-- Run TEB local planner  -->
    <param name="base_local_planner" value="teb_local_planner/TebLocalPlannerROS" if="$(arg teb)" />
  </node>

  <!-- Run Frontier Exploration -->
  <node pkg="explore_lite" type="explore" respawn="false" name="explore" output="screen">
    <param name="robot_base_frame" value="base_link"/>
    <param name="costmap_topic" value="move_base/global_costmap/costmap"/>
    <param name="costmap_updates_topic" value="move_base/global_costmap/costmap_updates"/>
    <param name="visualize" value="true"/>
    <param name="planner_frequency" value="0.33"/>
    <param name="progress_timeout" value="30.0"/>
    <param name="potential_scale" value="3.0"/>
    <param name="orientation_scale" value="0.0"/>
    <param name="gain_scale" value="1.0"/>
    <param name="transform_tolerance" value="0.3"/>
    <param name="min_frontier_size" value="0.5"/>
  </node>


  <!-- Load RVIZ -->
  <node if="$(arg rviz)" name="rviz" pkg="rviz" type="rviz" args="-d $(find rover_2dnav)/rviz/rover_frontier_map.rviz" />

  <!-- Record data  -->
  <node pkg="rosbag" type="record" name="rosbag_record_all"
    args="-a -o $(find rover_gazebo)/data/rover_conde"
    if="$(arg record_cam)" />  


</launch>
