# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autoware_config_msgs/ConfigWaypointReplanner.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ConfigWaypointReplanner(genpy.Message):
  _md5sum = "72d6b072a20ab4653993ebad17c0f697"
  _type = "autoware_config_msgs/ConfigWaypointReplanner"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string multi_lane_csv
bool replanning_mode
bool use_decision_maker
float32 velocity_max
float32 velocity_min
float32 accel_limit
float32 decel_limit
float32 lateral_accel_limit
float32 radius_min
bool resample_mode
float32 resample_interval
bool replan_curve_mode
bool replan_endpoint_mode
bool realtime_tuning_mode
"""
  __slots__ = ['multi_lane_csv','replanning_mode','use_decision_maker','velocity_max','velocity_min','accel_limit','decel_limit','lateral_accel_limit','radius_min','resample_mode','resample_interval','replan_curve_mode','replan_endpoint_mode','realtime_tuning_mode']
  _slot_types = ['string','bool','bool','float32','float32','float32','float32','float32','float32','bool','float32','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       multi_lane_csv,replanning_mode,use_decision_maker,velocity_max,velocity_min,accel_limit,decel_limit,lateral_accel_limit,radius_min,resample_mode,resample_interval,replan_curve_mode,replan_endpoint_mode,realtime_tuning_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ConfigWaypointReplanner, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.multi_lane_csv is None:
        self.multi_lane_csv = ''
      if self.replanning_mode is None:
        self.replanning_mode = False
      if self.use_decision_maker is None:
        self.use_decision_maker = False
      if self.velocity_max is None:
        self.velocity_max = 0.
      if self.velocity_min is None:
        self.velocity_min = 0.
      if self.accel_limit is None:
        self.accel_limit = 0.
      if self.decel_limit is None:
        self.decel_limit = 0.
      if self.lateral_accel_limit is None:
        self.lateral_accel_limit = 0.
      if self.radius_min is None:
        self.radius_min = 0.
      if self.resample_mode is None:
        self.resample_mode = False
      if self.resample_interval is None:
        self.resample_interval = 0.
      if self.replan_curve_mode is None:
        self.replan_curve_mode = False
      if self.replan_endpoint_mode is None:
        self.replan_endpoint_mode = False
      if self.realtime_tuning_mode is None:
        self.realtime_tuning_mode = False
    else:
      self.multi_lane_csv = ''
      self.replanning_mode = False
      self.use_decision_maker = False
      self.velocity_max = 0.
      self.velocity_min = 0.
      self.accel_limit = 0.
      self.decel_limit = 0.
      self.lateral_accel_limit = 0.
      self.radius_min = 0.
      self.resample_mode = False
      self.resample_interval = 0.
      self.replan_curve_mode = False
      self.replan_endpoint_mode = False
      self.realtime_tuning_mode = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.multi_lane_csv
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B6fBf3B().pack(_x.replanning_mode, _x.use_decision_maker, _x.velocity_max, _x.velocity_min, _x.accel_limit, _x.decel_limit, _x.lateral_accel_limit, _x.radius_min, _x.resample_mode, _x.resample_interval, _x.replan_curve_mode, _x.replan_endpoint_mode, _x.realtime_tuning_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.multi_lane_csv = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.multi_lane_csv = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.replanning_mode, _x.use_decision_maker, _x.velocity_max, _x.velocity_min, _x.accel_limit, _x.decel_limit, _x.lateral_accel_limit, _x.radius_min, _x.resample_mode, _x.resample_interval, _x.replan_curve_mode, _x.replan_endpoint_mode, _x.realtime_tuning_mode,) = _get_struct_2B6fBf3B().unpack(str[start:end])
      self.replanning_mode = bool(self.replanning_mode)
      self.use_decision_maker = bool(self.use_decision_maker)
      self.resample_mode = bool(self.resample_mode)
      self.replan_curve_mode = bool(self.replan_curve_mode)
      self.replan_endpoint_mode = bool(self.replan_endpoint_mode)
      self.realtime_tuning_mode = bool(self.realtime_tuning_mode)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.multi_lane_csv
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B6fBf3B().pack(_x.replanning_mode, _x.use_decision_maker, _x.velocity_max, _x.velocity_min, _x.accel_limit, _x.decel_limit, _x.lateral_accel_limit, _x.radius_min, _x.resample_mode, _x.resample_interval, _x.replan_curve_mode, _x.replan_endpoint_mode, _x.realtime_tuning_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.multi_lane_csv = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.multi_lane_csv = str[start:end]
      _x = self
      start = end
      end += 34
      (_x.replanning_mode, _x.use_decision_maker, _x.velocity_max, _x.velocity_min, _x.accel_limit, _x.decel_limit, _x.lateral_accel_limit, _x.radius_min, _x.resample_mode, _x.resample_interval, _x.replan_curve_mode, _x.replan_endpoint_mode, _x.realtime_tuning_mode,) = _get_struct_2B6fBf3B().unpack(str[start:end])
      self.replanning_mode = bool(self.replanning_mode)
      self.use_decision_maker = bool(self.use_decision_maker)
      self.resample_mode = bool(self.resample_mode)
      self.replan_curve_mode = bool(self.replan_curve_mode)
      self.replan_endpoint_mode = bool(self.replan_endpoint_mode)
      self.realtime_tuning_mode = bool(self.realtime_tuning_mode)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B6fBf3B = None
def _get_struct_2B6fBf3B():
    global _struct_2B6fBf3B
    if _struct_2B6fBf3B is None:
        _struct_2B6fBf3B = struct.Struct("<2B6fBf3B")
    return _struct_2B6fBf3B
