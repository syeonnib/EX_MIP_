# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autoware_system_msgs/SystemStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import autoware_system_msgs.msg
import genpy
import rosgraph_msgs.msg
import std_msgs.msg

class SystemStatus(genpy.Message):
  _md5sum = "7daf3e9d5c454c414ddc765307bd564d"
  _type = "autoware_system_msgs/SystemStatus"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
string[] available_nodes
bool detect_too_match_warning
autoware_system_msgs/NodeStatus[] node_status
autoware_system_msgs/HardwareStatus[] hardware_status
rosgraph_msgs/TopicStatistics[] topic_statistics
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: autoware_system_msgs/NodeStatus
Header header
string node_name
bool node_activated
autoware_system_msgs/DiagnosticStatusArray[] status
================================================================================
MSG: autoware_system_msgs/DiagnosticStatusArray
autoware_system_msgs/DiagnosticStatus[] status
================================================================================
MSG: autoware_system_msgs/DiagnosticStatus
Header header

string key

string value

string description

uint8 UNDEFINED = 0

uint8 type
uint8 OUT_OF_RANGE = 1
uint8 UNEXPECTED_RATE = 2
uint8 INVALID_VALUE = 3
uint8 INTERNAL = 4
uint8 FUNCTIONAL = 100
uint8 HARDWARE = 200

uint8 level
uint8 OK = 1
uint8 WARN = 2
uint8 ERROR = 3
uint8 FATAL = 4

================================================================================
MSG: autoware_system_msgs/HardwareStatus
std_msgs/Header header
string hardware_name
autoware_system_msgs/DiagnosticStatusArray[] status
================================================================================
MSG: rosgraph_msgs/TopicStatistics
# name of the topic
string topic

# node id of the publisher
string node_pub

# node id of the subscriber
string node_sub

# the statistics apply to this time window
time window_start
time window_stop

# number of messages delivered during the window
int32 delivered_msgs
# numbers of messages dropped during the window
int32 dropped_msgs

# traffic during the window, in bytes
int32 traffic

# mean/stddev/max period between two messages
duration period_mean
duration period_stddev
duration period_max

# mean/stddev/max age of the message based on the
# timestamp in the message header. In case the
# message does not have a header, it will be 0.
duration stamp_age_mean
duration stamp_age_stddev
duration stamp_age_max
"""
  __slots__ = ['header','available_nodes','detect_too_match_warning','node_status','hardware_status','topic_statistics']
  _slot_types = ['std_msgs/Header','string[]','bool','autoware_system_msgs/NodeStatus[]','autoware_system_msgs/HardwareStatus[]','rosgraph_msgs/TopicStatistics[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,available_nodes,detect_too_match_warning,node_status,hardware_status,topic_statistics

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SystemStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.available_nodes is None:
        self.available_nodes = []
      if self.detect_too_match_warning is None:
        self.detect_too_match_warning = False
      if self.node_status is None:
        self.node_status = []
      if self.hardware_status is None:
        self.hardware_status = []
      if self.topic_statistics is None:
        self.topic_statistics = []
    else:
      self.header = std_msgs.msg.Header()
      self.available_nodes = []
      self.detect_too_match_warning = False
      self.node_status = []
      self.hardware_status = []
      self.topic_statistics = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.available_nodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.available_nodes:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.detect_too_match_warning
      buff.write(_get_struct_B().pack(_x))
      length = len(self.node_status)
      buff.write(_struct_I.pack(length))
      for val1 in self.node_status:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.node_activated
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.status)
        buff.write(_struct_I.pack(length))
        for val2 in val1.status:
          length = len(val2.status)
          buff.write(_struct_I.pack(length))
          for val3 in val2.status:
            _v3 = val3.header
            _x = _v3.seq
            buff.write(_get_struct_I().pack(_x))
            _v4 = _v3.stamp
            _x = _v4
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v3.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3.description
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3
            buff.write(_get_struct_2B().pack(_x.type, _x.level))
      length = len(self.hardware_status)
      buff.write(_struct_I.pack(length))
      for val1 in self.hardware_status:
        _v5 = val1.header
        _x = _v5.seq
        buff.write(_get_struct_I().pack(_x))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.hardware_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.status)
        buff.write(_struct_I.pack(length))
        for val2 in val1.status:
          length = len(val2.status)
          buff.write(_struct_I.pack(length))
          for val3 in val2.status:
            _v7 = val3.header
            _x = _v7.seq
            buff.write(_get_struct_I().pack(_x))
            _v8 = _v7.stamp
            _x = _v8
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v7.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3.description
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3
            buff.write(_get_struct_2B().pack(_x.type, _x.level))
      length = len(self.topic_statistics)
      buff.write(_struct_I.pack(length))
      for val1 in self.topic_statistics:
        _x = val1.topic
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.node_pub
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.node_sub
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v9 = val1.window_start
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v10 = val1.window_stop
        _x = _v10
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_get_struct_3i().pack(_x.delivered_msgs, _x.dropped_msgs, _x.traffic))
        _v11 = val1.period_mean
        _x = _v11
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v12 = val1.period_stddev
        _x = _v12
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v13 = val1.period_max
        _x = _v13
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v14 = val1.stamp_age_mean
        _x = _v14
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v15 = val1.stamp_age_stddev
        _x = _v15
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v16 = val1.stamp_age_max
        _x = _v16
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.node_status is None:
        self.node_status = None
      if self.hardware_status is None:
        self.hardware_status = None
      if self.topic_statistics is None:
        self.topic_statistics = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available_nodes = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.available_nodes.append(val1)
      start = end
      end += 1
      (self.detect_too_match_warning,) = _get_struct_B().unpack(str[start:end])
      self.detect_too_match_warning = bool(self.detect_too_match_warning)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.node_status = []
      for i in range(0, length):
        val1 = autoware_system_msgs.msg.NodeStatus()
        _v17 = val1.header
        start = end
        end += 4
        (_v17.seq,) = _get_struct_I().unpack(str[start:end])
        _v18 = _v17.stamp
        _x = _v18
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v17.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v17.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.node_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.node_name = str[start:end]
        start = end
        end += 1
        (val1.node_activated,) = _get_struct_B().unpack(str[start:end])
        val1.node_activated = bool(val1.node_activated)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.status = []
        for i in range(0, length):
          val2 = autoware_system_msgs.msg.DiagnosticStatusArray()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.status = []
          for i in range(0, length):
            val3 = autoware_system_msgs.msg.DiagnosticStatus()
            _v19 = val3.header
            start = end
            end += 4
            (_v19.seq,) = _get_struct_I().unpack(str[start:end])
            _v20 = _v19.stamp
            _x = _v20
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v19.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v19.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.value = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.description = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.description = str[start:end]
            _x = val3
            start = end
            end += 2
            (_x.type, _x.level,) = _get_struct_2B().unpack(str[start:end])
            val2.status.append(val3)
          val1.status.append(val2)
        self.node_status.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hardware_status = []
      for i in range(0, length):
        val1 = autoware_system_msgs.msg.HardwareStatus()
        _v21 = val1.header
        start = end
        end += 4
        (_v21.seq,) = _get_struct_I().unpack(str[start:end])
        _v22 = _v21.stamp
        _x = _v22
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v21.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v21.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.hardware_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.hardware_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.status = []
        for i in range(0, length):
          val2 = autoware_system_msgs.msg.DiagnosticStatusArray()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.status = []
          for i in range(0, length):
            val3 = autoware_system_msgs.msg.DiagnosticStatus()
            _v23 = val3.header
            start = end
            end += 4
            (_v23.seq,) = _get_struct_I().unpack(str[start:end])
            _v24 = _v23.stamp
            _x = _v24
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v23.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v23.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.value = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.description = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.description = str[start:end]
            _x = val3
            start = end
            end += 2
            (_x.type, _x.level,) = _get_struct_2B().unpack(str[start:end])
            val2.status.append(val3)
          val1.status.append(val2)
        self.hardware_status.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.topic_statistics = []
      for i in range(0, length):
        val1 = rosgraph_msgs.msg.TopicStatistics()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.topic = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.topic = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.node_pub = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.node_pub = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.node_sub = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.node_sub = str[start:end]
        _v25 = val1.window_start
        _x = _v25
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v26 = val1.window_stop
        _x = _v26
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.delivered_msgs, _x.dropped_msgs, _x.traffic,) = _get_struct_3i().unpack(str[start:end])
        _v27 = val1.period_mean
        _x = _v27
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        _v28 = val1.period_stddev
        _x = _v28
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        _v29 = val1.period_max
        _x = _v29
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        _v30 = val1.stamp_age_mean
        _x = _v30
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        _v31 = val1.stamp_age_stddev
        _x = _v31
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        _v32 = val1.stamp_age_max
        _x = _v32
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.topic_statistics.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.available_nodes)
      buff.write(_struct_I.pack(length))
      for val1 in self.available_nodes:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.detect_too_match_warning
      buff.write(_get_struct_B().pack(_x))
      length = len(self.node_status)
      buff.write(_struct_I.pack(length))
      for val1 in self.node_status:
        _v33 = val1.header
        _x = _v33.seq
        buff.write(_get_struct_I().pack(_x))
        _v34 = _v33.stamp
        _x = _v34
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v33.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.node_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.node_activated
        buff.write(_get_struct_B().pack(_x))
        length = len(val1.status)
        buff.write(_struct_I.pack(length))
        for val2 in val1.status:
          length = len(val2.status)
          buff.write(_struct_I.pack(length))
          for val3 in val2.status:
            _v35 = val3.header
            _x = _v35.seq
            buff.write(_get_struct_I().pack(_x))
            _v36 = _v35.stamp
            _x = _v36
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v35.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3.description
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3
            buff.write(_get_struct_2B().pack(_x.type, _x.level))
      length = len(self.hardware_status)
      buff.write(_struct_I.pack(length))
      for val1 in self.hardware_status:
        _v37 = val1.header
        _x = _v37.seq
        buff.write(_get_struct_I().pack(_x))
        _v38 = _v37.stamp
        _x = _v38
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v37.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.hardware_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.status)
        buff.write(_struct_I.pack(length))
        for val2 in val1.status:
          length = len(val2.status)
          buff.write(_struct_I.pack(length))
          for val3 in val2.status:
            _v39 = val3.header
            _x = _v39.seq
            buff.write(_get_struct_I().pack(_x))
            _v40 = _v39.stamp
            _x = _v40
            buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
            _x = _v39.frame_id
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3.description
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
            _x = val3
            buff.write(_get_struct_2B().pack(_x.type, _x.level))
      length = len(self.topic_statistics)
      buff.write(_struct_I.pack(length))
      for val1 in self.topic_statistics:
        _x = val1.topic
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.node_pub
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.node_sub
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v41 = val1.window_start
        _x = _v41
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _v42 = val1.window_stop
        _x = _v42
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = val1
        buff.write(_get_struct_3i().pack(_x.delivered_msgs, _x.dropped_msgs, _x.traffic))
        _v43 = val1.period_mean
        _x = _v43
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v44 = val1.period_stddev
        _x = _v44
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v45 = val1.period_max
        _x = _v45
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v46 = val1.stamp_age_mean
        _x = _v46
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v47 = val1.stamp_age_stddev
        _x = _v47
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v48 = val1.stamp_age_max
        _x = _v48
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.node_status is None:
        self.node_status = None
      if self.hardware_status is None:
        self.hardware_status = None
      if self.topic_statistics is None:
        self.topic_statistics = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available_nodes = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.available_nodes.append(val1)
      start = end
      end += 1
      (self.detect_too_match_warning,) = _get_struct_B().unpack(str[start:end])
      self.detect_too_match_warning = bool(self.detect_too_match_warning)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.node_status = []
      for i in range(0, length):
        val1 = autoware_system_msgs.msg.NodeStatus()
        _v49 = val1.header
        start = end
        end += 4
        (_v49.seq,) = _get_struct_I().unpack(str[start:end])
        _v50 = _v49.stamp
        _x = _v50
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v49.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v49.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.node_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.node_name = str[start:end]
        start = end
        end += 1
        (val1.node_activated,) = _get_struct_B().unpack(str[start:end])
        val1.node_activated = bool(val1.node_activated)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.status = []
        for i in range(0, length):
          val2 = autoware_system_msgs.msg.DiagnosticStatusArray()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.status = []
          for i in range(0, length):
            val3 = autoware_system_msgs.msg.DiagnosticStatus()
            _v51 = val3.header
            start = end
            end += 4
            (_v51.seq,) = _get_struct_I().unpack(str[start:end])
            _v52 = _v51.stamp
            _x = _v52
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v51.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v51.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.value = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.description = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.description = str[start:end]
            _x = val3
            start = end
            end += 2
            (_x.type, _x.level,) = _get_struct_2B().unpack(str[start:end])
            val2.status.append(val3)
          val1.status.append(val2)
        self.node_status.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hardware_status = []
      for i in range(0, length):
        val1 = autoware_system_msgs.msg.HardwareStatus()
        _v53 = val1.header
        start = end
        end += 4
        (_v53.seq,) = _get_struct_I().unpack(str[start:end])
        _v54 = _v53.stamp
        _x = _v54
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v53.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v53.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.hardware_name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.hardware_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.status = []
        for i in range(0, length):
          val2 = autoware_system_msgs.msg.DiagnosticStatusArray()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.status = []
          for i in range(0, length):
            val3 = autoware_system_msgs.msg.DiagnosticStatus()
            _v55 = val3.header
            start = end
            end += 4
            (_v55.seq,) = _get_struct_I().unpack(str[start:end])
            _v56 = _v55.stamp
            _x = _v56
            start = end
            end += 8
            (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              _v55.frame_id = str[start:end].decode('utf-8', 'rosmsg')
            else:
              _v55.frame_id = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.key = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.value = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.value = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val3.description = str[start:end].decode('utf-8', 'rosmsg')
            else:
              val3.description = str[start:end]
            _x = val3
            start = end
            end += 2
            (_x.type, _x.level,) = _get_struct_2B().unpack(str[start:end])
            val2.status.append(val3)
          val1.status.append(val2)
        self.hardware_status.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.topic_statistics = []
      for i in range(0, length):
        val1 = rosgraph_msgs.msg.TopicStatistics()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.topic = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.topic = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.node_pub = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.node_pub = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.node_sub = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.node_sub = str[start:end]
        _v57 = val1.window_start
        _x = _v57
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _v58 = val1.window_stop
        _x = _v58
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        _x = val1
        start = end
        end += 12
        (_x.delivered_msgs, _x.dropped_msgs, _x.traffic,) = _get_struct_3i().unpack(str[start:end])
        _v59 = val1.period_mean
        _x = _v59
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        _v60 = val1.period_stddev
        _x = _v60
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        _v61 = val1.period_max
        _x = _v61
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        _v62 = val1.stamp_age_mean
        _x = _v62
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        _v63 = val1.stamp_age_stddev
        _x = _v63
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        _v64 = val1.stamp_age_max
        _x = _v64
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.topic_statistics.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
