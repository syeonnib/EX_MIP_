# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autoware_map_msgs/Lane.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Lane(genpy.Message):
  _md5sum = "bfc9dc43edcd85ad77faeee0a34e6b3f"
  _type = "autoware_map_msgs/Lane"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This represents a lane in a map.

# Id of this Lane object. Must be unique among all lane objects.
int32 lane_id

# Id of the first waypoint that belongs to this lane
int32 start_waypoint_id

# Id of the last waypoint that belongs to this lane
int32 end_waypoint_id

# This describes how many lanes there are in left side of this lane.
# E.g. If there are 2 lanes on the left side, then lane_number will be 2. 
# If the road is single lane, then this will be 0. 
# This will be always 0 in intersection. 
int32 lane_number

# Total number of lanes present in road. 
int32 num_of_lanes

# Speed limit of this lane in [km/h]
float64 speed_limit

# Length of this lane in [m]
# i.e. accumulated length from start_waypoint to end_waypoint of this lane
float64 length

# Maximum width of vehicle that can drive this lane in [m]
float64 width_limit

# Maximum height of vehicle that can drive this lane in [m]. 
float64 height_limit

# Maximum weight of vehicle that can drive this lane in [kg]. 
float64 weight_limit
"""
  __slots__ = ['lane_id','start_waypoint_id','end_waypoint_id','lane_number','num_of_lanes','speed_limit','length','width_limit','height_limit','weight_limit']
  _slot_types = ['int32','int32','int32','int32','int32','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lane_id,start_waypoint_id,end_waypoint_id,lane_number,num_of_lanes,speed_limit,length,width_limit,height_limit,weight_limit

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Lane, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lane_id is None:
        self.lane_id = 0
      if self.start_waypoint_id is None:
        self.start_waypoint_id = 0
      if self.end_waypoint_id is None:
        self.end_waypoint_id = 0
      if self.lane_number is None:
        self.lane_number = 0
      if self.num_of_lanes is None:
        self.num_of_lanes = 0
      if self.speed_limit is None:
        self.speed_limit = 0.
      if self.length is None:
        self.length = 0.
      if self.width_limit is None:
        self.width_limit = 0.
      if self.height_limit is None:
        self.height_limit = 0.
      if self.weight_limit is None:
        self.weight_limit = 0.
    else:
      self.lane_id = 0
      self.start_waypoint_id = 0
      self.end_waypoint_id = 0
      self.lane_number = 0
      self.num_of_lanes = 0
      self.speed_limit = 0.
      self.length = 0.
      self.width_limit = 0.
      self.height_limit = 0.
      self.weight_limit = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5i5d().pack(_x.lane_id, _x.start_waypoint_id, _x.end_waypoint_id, _x.lane_number, _x.num_of_lanes, _x.speed_limit, _x.length, _x.width_limit, _x.height_limit, _x.weight_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.lane_id, _x.start_waypoint_id, _x.end_waypoint_id, _x.lane_number, _x.num_of_lanes, _x.speed_limit, _x.length, _x.width_limit, _x.height_limit, _x.weight_limit,) = _get_struct_5i5d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5i5d().pack(_x.lane_id, _x.start_waypoint_id, _x.end_waypoint_id, _x.lane_number, _x.num_of_lanes, _x.speed_limit, _x.length, _x.width_limit, _x.height_limit, _x.weight_limit))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.lane_id, _x.start_waypoint_id, _x.end_waypoint_id, _x.lane_number, _x.num_of_lanes, _x.speed_limit, _x.length, _x.width_limit, _x.height_limit, _x.weight_limit,) = _get_struct_5i5d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5i5d = None
def _get_struct_5i5d():
    global _struct_5i5d
    if _struct_5i5d is None:
        _struct_5i5d = struct.Struct("<5i5d")
    return _struct_5i5d
