# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from autoware_map_msgs/Point.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Point(genpy.Message):
  _md5sum = "2eca464a653f0f18a5e4b6d3694d3d9c"
  _type = "autoware_map_msgs/Point"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This represents a point in a map.

# Id of this Point object. Must be unique among all points in a map.
int32 point_id

# Position of a point in MGRS coordinate [m]
# x = northing
# y = easting
# z = elevation
float64 x
float64 y
float64 z

# Codes that describe coordinate of the x,y,z values. 
int32 mgrs
int32 epsg

# PCD file name which that is relevant. 
string pcd

# latitude and longitude in WGS84 coordinate in [deg]
float64 lat
float64 lng
"""
  __slots__ = ['point_id','x','y','z','mgrs','epsg','pcd','lat','lng']
  _slot_types = ['int32','float64','float64','float64','int32','int32','string','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       point_id,x,y,z,mgrs,epsg,pcd,lat,lng

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Point, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.point_id is None:
        self.point_id = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.mgrs is None:
        self.mgrs = 0
      if self.epsg is None:
        self.epsg = 0
      if self.pcd is None:
        self.pcd = ''
      if self.lat is None:
        self.lat = 0.
      if self.lng is None:
        self.lng = 0.
    else:
      self.point_id = 0
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.mgrs = 0
      self.epsg = 0
      self.pcd = ''
      self.lat = 0.
      self.lng = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i3d2i().pack(_x.point_id, _x.x, _x.y, _x.z, _x.mgrs, _x.epsg))
      _x = self.pcd
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.lat, _x.lng))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.point_id, _x.x, _x.y, _x.z, _x.mgrs, _x.epsg,) = _get_struct_i3d2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pcd = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pcd = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.lat, _x.lng,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i3d2i().pack(_x.point_id, _x.x, _x.y, _x.z, _x.mgrs, _x.epsg))
      _x = self.pcd
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2d().pack(_x.lat, _x.lng))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.point_id, _x.x, _x.y, _x.z, _x.mgrs, _x.epsg,) = _get_struct_i3d2i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pcd = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pcd = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.lat, _x.lng,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_i3d2i = None
def _get_struct_i3d2i():
    global _struct_i3d2i
    if _struct_i3d2i is None:
        _struct_i3d2i = struct.Struct("<i3d2i")
    return _struct_i3d2i
