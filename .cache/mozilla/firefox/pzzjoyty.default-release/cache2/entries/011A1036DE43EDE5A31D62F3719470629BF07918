/*
  SortTable
  version 2
  7th April 2007
  Stuart Langridge, http://www.kryogenix.org/code/browser/sorttable/
  
  Instructions:
  Download this file
  Add <script src="sorttable.js"></script> to your HTML
  Add class="sortable" to any table you'd like to make sortable
  Click on the headers to sort
  
  Thanks to many, many people for contributions and suggestions.
  Licenced as X11: http://www.kryogenix.org/code/browser/licence.html
  This basically means: do what you want with it.
*/

 
var stIsIE = /*@cc_on!@*/false;

sorttable = {
  init: function() {
    // quit if this function has already been called
    if (arguments.callee.done) return;
    // flag this function so we don't do the same thing twice
    arguments.callee.done = true;
    // kill the timer
    if (_timer) clearInterval(_timer);
    
    if (!document.createElement || !document.getElementsByTagName) return;
    
    sorttable.DATE_RE = /^(\d\d?)[\/\.-](\d\d?)[\/\.-]((\d\d)?\d\d)$/;
    
    forEach(document.getElementsByTagName('table'), function(table) {
      if (table.className.search(/\bsortable\b/) != -1) {
        sorttable.makeSortable(table);
      }
    });
    
  },
  
  makeSortable: function(table) {
    if (table.getElementsByTagName('thead').length == 0) {
      // table doesn't have a tHead. Since it should have, create one and
      // put the first table row in it.
      the = document.createElement('thead');
      the.appendChild(table.rows[0]);
      table.insertBefore(the,table.firstChild);
    }
    // Safari doesn't support table.tHead, sigh
    if (table.tHead == null) table.tHead = table.getElementsByTagName('thead')[0];
    
    if (table.tHead.rows.length != 1) return; // can't cope with two header rows
    
    // Sorttable v1 put rows with a class of "sortbottom" at the bottom (as
    // "total" rows, for example). This is B&R, since what you're supposed
    // to do is put them in a tfoot. So, if there are sortbottom rows,
    // for backwards compatibility, move them to tfoot (creating it if needed).
    sortbottomrows = [];
    for (var i=0; i<table.rows.length; i++) {
      if (table.rows[i].className.search(/\bsortbottom\b/) != -1) {
        sortbottomrows[sortbottomrows.length] = table.rows[i];
      }
    }
    if (sortbottomrows) {
      if (table.tFoot == null) {
        // table doesn't have a tfoot. Create one.
        tfo = document.createElement('tfoot');
        table.appendChild(tfo);
      }
      for (var i=0; i<sortbottomrows.length; i++) {
        tfo.appendChild(sortbottomrows[i]);
      }
      delete sortbottomrows;
    }
    
    // work through each column and calculate its type
    headrow = table.tHead.rows[0].cells;
    for (var i=0; i<headrow.length; i++) {
      // manually override the type with a sorttable_type attribute
      if (!headrow[i].className.match(/\bsorttable_nosort\b/)) { // skip this col
        mtch = headrow[i].className.match(/\bsorttable_([a-z0-9]+)\b/);
        if (mtch) { override = mtch[1]; }
	      if (mtch && typeof sorttable["sort_"+override] == 'function') {
	        headrow[i].sorttable_sortfunction = sorttable["sort_"+override];
	      } else {
	        headrow[i].sorttable_sortfunction = sorttable.guessType(table,i);
	      }
	      // make it clickable to sort
	      headrow[i].sorttable_columnindex = i;
	      headrow[i].sorttable_tbody = table.tBodies[0];
	      dean_addEvent(headrow[i],"click", function(e) {

          if (this.className.search(/\bsorttable_sorted\b/) != -1) {
            // if we're already sorted by this column, just 
            // reverse the table, which is quicker
            sorttable.reverse(this.sorttable_tbody);
            this.className = this.className.replace('sorttable_sorted',
                                                    'sorttable_sorted_reverse');
            this.removeChild(document.getElementById('sorttable_sortfwdind'));
            sortrevind = document.createElement('span');
            sortrevind.id = "sorttable_sortrevind";
            sortrevind.innerHTML = stIsIE ? '&nbsp<font face="webdings">5</font>' : '&nbsp;&#x25B4;';
            this.appendChild(sortrevind);
            return;
          }
          if (this.className.search(/\bsorttable_sorted_reverse\b/) != -1) {
            // if we're already sorted by this column in reverse, just 
            // re-reverse the table, which is quicker
            sorttable.reverse(this.sorttable_tbody);
            this.className = this.className.replace('sorttable_sorted_reverse',
                                                    'sorttable_sorted');
            this.removeChild(document.getElementById('sorttable_sortrevind'));
            sortfwdind = document.createElement('span');
            sortfwdind.id = "sorttable_sortfwdind";
            sortfwdind.innerHTML = stIsIE ? '&nbsp<font face="webdings">6</font>' : '&nbsp;&#x25BE;';
            this.appendChild(sortfwdind);
            return;
          }
          
          // remove sorttable_sorted classes
          theadrow = this.parentNode;
          forEach(theadrow.childNodes, function(cell) {
            if (cell.nodeType == 1) { // an element
              cell.className = cell.className.replace('sorttable_sorted_reverse','');
              cell.className = cell.className.replace('sorttable_sorted','');
            }
          });
          sortfwdind = document.getElementById('sorttable_sortfwdind');
          if (sortfwdind) { sortfwdind.parentNode.removeChild(sortfwdind); }
          sortrevind = document.getElementById('sorttable_sortrevind');
          if (sortrevind) { sortrevind.parentNode.removeChild(sortrevind); }
          
          this.className += ' sorttable_sorted';
          sortfwdind = document.createElement('span');
          sortfwdind.id = "sorttable_sortfwdind";
          sortfwdind.innerHTML = stIsIE ? '&nbsp<font face="webdings">6</font>' : '&nbsp;&#x25BE;';
          this.appendChild(sortfwdind);

	        // build an array to sort. This is a Schwartzian transform thing,
	        // i.e., we "decorate" each row with the actual sort key,
	        // sort based on the sort keys, and then put the rows back in order
	        // which is a lot faster because you only do getInnerText once per row
	        row_array = [];
	        col = this.sorttable_columnindex;
	        rows = this.sorttable_tbody.rows;
	        for (var j=0; j<rows.length; j++) {
	          row_array[row_array.length] = [sorttable.getInnerText(rows[j].cells[col]), rows[j]];
	        }
	        /* If you want a stable sort, uncomment the following line */
	        //sorttable.shaker_sort(row_array, this.sorttable_sortfunction);
	        /* and comment out this one */
	        row_array.sort(this.sorttable_sortfunction);
	        
	        tb = this.sorttable_tbody;
	        for (var j=0; j<row_array.length; j++) {
	          tb.appendChild(row_array[j][1]);
	        }
	        
	        delete row_array;
	      });
	    }
    }
  },
  
  guessType: function(table, column) {
    // guess the type of a column based on its first non-blank row
    sortfn = sorttable.sort_alpha;
    for (var i=0; i<table.tBodies[0].rows.length; i++) {
      text = sorttable.getInnerText(table.tBodies[0].rows[i].cells[column]);
      if (text != '') {
        if (text.match(/^-?[£$¤]?[\d,.]+%?$/)) {
          return sorttable.sort_numeric;
        }
        // check for a date: dd/mm/yyyy or dd/mm/yy 
        // can have / or . or - as separator
        // can be mm/dd as well
        possdate = text.match(sorttable.DATE_RE)
        if (possdate) {
          // looks like a date
          first = parseInt(possdate[1]);
          second = parseInt(possdate[2]);
          if (first > 12) {
            // definitely dd/mm
            return sorttable.sort_ddmm;
          } else if (second > 12) {
            return sorttable.sort_mmdd;
          } else {
            // looks like a date, but we can't tell which, so assume
            // that it's dd/mm (English imperialism!) and keep looking
            sortfn = sorttable.sort_ddmm;
          }
        }
      }
    }
    return sortfn;
  },
  
  getInnerText: function(node) {
    // gets the text we want to use for sorting for a cell.
    // strips leading and trailing whitespace.
    // this is *not* a generic getInnerText function; it's special to sorttable.
    // for example, you can override the cell text with a customkey attribute.
    // it also gets .value for <input> fields.
    
    hasInputs = (typeof node.getElementsByTagName == 'function') &&
                 node.getElementsByTagName('input').length;
    
    if (node.getAttribute("sorttable_customkey") != null) {
      return node.getAttribute("sorttable_customkey");
    }
    else if (typeof node.textContent != 'undefined' && !hasInputs) {
      return node.textContent.replace(/^\s+|\s+$/g, '');
    }
    else if (typeof node.innerText != 'undefined' && !hasInputs) {
      return node.innerText.replace(/^\s+|\s+$/g, '');
    }
    else if (typeof node.text != 'undefined' && !hasInputs) {
      return node.text.replace(/^\s+|\s+$/g, '');
    }
    else {
      switch (node.nodeType) {
        case 3:
          if (node.nodeName.toLowerCase() == 'input') {
            return node.value.replace(/^\s+|\s+$/g, '');
          }
        case 4:
          return node.nodeValue.replace(/^\s+|\s+$/g, '');
          break;
        case 1:
        case 11:
          var innerText = '';
          for (var i = 0; i < node.childNodes.length; i++) {
            innerText += sorttable.getInnerText(node.childNodes[i]);
          }
          return innerText.replace(/^\s+|\s+$/g, '');
          break;
        default:
          return '';
      }
    }
  },
  
  reverse: function(tbody) {
    // reverse the rows in a tbody
    newrows = [];
    for (var i=0; i<tbody.rows.length; i++) {
      newrows[newrows.length] = tbody.rows[i];
    }
    for (var i=newrows.length-1; i>=0; i--) {
       tbody.appendChild(newrows[i]);
    }
    delete newrows;
  },
  
  /* sort functions
     each sort function takes two parameters, a and b
     you are comparing a[0] and b[0] */
  sort_numeric: function(a,b) {
    aa = parseFloat(a[0].replace(/[^0-9.-]/g,''));
    if (isNaN(aa)) aa = 0;
    bb = parseFloat(b[0].replace(/[^0-9.-]/g,'')); 
    if (isNaN(bb)) bb = 0;
    return aa-bb;
  },
  sort_alpha: function(a,b) {
    if (a[0]==b[0]) return 0;
    if (a[0]<b[0]) return -1;
    return 1;
  },
  sort_ddmm: function(a,b) {
    mtch = a[0].match(sorttable.DATE_RE);
    y = mtch[3]; m = mtch[2]; d = mtch[1];
    if (m.length == 1) m = '0'+m;
    if (d.length == 1) d = '0'+d;
    dt1 = y+m+d;
    mtch = b[0].match(sorttable.DATE_RE);
    y = mtch[3]; m = mtch[2]; d = mtch[1];
    if (m.length == 1) m = '0'+m;
    if (d.length == 1) d = '0'+d;
    dt2 = y+m+d;
    if (dt1==dt2) return 0;
    if (dt1<dt2) return -1;
    return 1;
  },
  sort_mmdd: function(a,b) {
    mtch = a[0].match(sorttable.DATE_RE);
    y = mtch[3]; d = mtch[2]; m = mtch[1];
    if (m.length == 1) m = '0'+m;
    if (d.length == 1) d = '0'+d;
    dt1 = y+m+d;
    mtch = b[0].match(sorttable.DATE_RE);
    y = mtch[3]; d = mtch[2]; m = mtch[1];
    if (m.length == 1) m = '0'+m;
    if (d.length == 1) d = '0'+d;
    dt2 = y+m+d;
    if (dt1==dt2) return 0;
    if (dt1<dt2) return -1;
    return 1;
  },
  
  shaker_sort: function(list, comp_func) {
    // A stable sort function to allow multi-level sorting of data
    // see: http://en.wikipedia.org/wiki/Cocktail_sort
    // thanks to Joseph Nahmias
    var b = 0;
    var t = list.length - 1;
    var swap = true;

    while(swap) {
        swap = false;
        for(var i = b; i < t; ++i) {
            if ( comp_func(list[i], list[i+1]) > 0 ) {
                var q = list[i]; list[i] = list[i+1]; list[i+1] = q;
                swap = true;
            }
        } // for
        t--;

        if (!swap) break;

        for(var i = t; i > b; --i) {
            if ( comp_func(list[i], list[i-1]) < 0 ) {
                var q = list[i]; list[i] = list[i-1]; list[i-1] = q;
                swap = true;
            }
        } // for
        b++;

    } // while(swap)
  }  
}

/* ******************************************************************
   Supporting functions: bundled here to avoid depending on a library
   ****************************************************************** */

// Dean Edwards/Matthias Miller/John Resig

/* for Mozilla/Opera9 */
if (document.addEventListener) {
    document.addEventListener("DOMContentLoaded", sorttable.init, false);
}

/* for Internet Explorer */
/*@cc_on @*/
/*@if (@_win32)
    document.write("<script id=__ie_onload defer src=javascript:void(0)><\/script>");
    var script = document.getElementById("__ie_onload");
    script.onreadystatechange = function() {
        if (this.readyState == "complete") {
            sorttable.init(); // call the onload handler
        }
    };
/*@end @*/

/* for Safari */
if (/WebKit/i.test(navigator.userAgent)) { // sniff
    var _timer = setInterval(function() {
        if (/loaded|complete/.test(document.readyState)) {
            sorttable.init(); // call the onload handler
        }
    }, 10);
}

/* for other browsers */
window.onload = sorttable.init;

// written by Dean Edwards, 2005
// with input from Tino Zijdel, Matthias Miller, Diego Perini

// http://dean.edwards.name/weblog/2005/10/add-event/

function dean_addEvent(element, type, handler) {
	if (element.addEventListener) {
		element.addEventListener(type, handler, false);
	} else {
		// assign each event handler a unique ID
		if (!handler.$$guid) handler.$$guid = dean_addEvent.guid++;
		// create a hash table of event types for the element
		if (!element.events) element.events = {};
		// create a hash table of event handlers for each element/event pair
		var handlers = element.events[type];
		if (!handlers) {
			handlers = element.events[type] = {};
			// store the existing event handler (if there is one)
			if (element["on" + type]) {
				handlers[0] = element["on" + type];
			}
		}
		// store the event handler in the hash table
		handlers[handler.$$guid] = handler;
		// assign a global event handler to do all the work
		element["on" + type] = handleEvent;
	}
};
// a counter used to create unique IDs
dean_addEvent.guid = 1;

function removeEvent(element, type, handler) {
	if (element.removeEventListener) {
		element.removeEventListener(type, handler, false);
	} else {
		// delete the event handler from the hash table
		if (element.events && element.events[type]) {
			delete element.events[type][handler.$$guid];
		}
	}
};

function handleEvent(event) {
	var returnValue = true;
	// grab the event object (IE uses a global event object)
	event = event || fixEvent(((this.ownerDocument || this.document || this).parentWindow || window).event);
	// get a reference to the hash table of event handlers
	var handlers = this.events[event.type];
	// execute each event handler
	for (var i in handlers) {
		this.$$handleEvent = handlers[i];
		if (this.$$handleEvent(event) === false) {
			returnValue = false;
		}
	}
	return returnValue;
};

function fixEvent(event) {
	// add W3C standard event methods
	event.preventDefault = fixEvent.preventDefault;
	event.stopPropagation = fixEvent.stopPropagation;
	return event;
};
fixEvent.preventDefault = function() {
	this.returnValue = false;
};
fixEvent.stopPropagation = function() {
  this.cancelBubble = true;
}

// Dean's forEach: http://dean.edwards.name/base/forEach.js
/*
	forEach, version 1.0
	Copyright 2006, Dean Edwards
	License: http://www.opensource.org/licenses/mit-license.php
*/

// array-like enumeration
if (!Array.forEach) { // mozilla already supports this
	Array.forEach = function(array, block, context) {
		for (var i = 0; i < array.length; i++) {
			block.call(context, array[i], i, array);
		}
	};
}

// generic enumeration
Function.prototype.forEach = function(object, block, context) {
	for (var key in object) {
		if (typeof this.prototype[key] == "undefined") {
			block.call(context, object[key], key, object);
		}
	}
};

// character enumeration
String.forEach = function(string, block, context) {
	Array.forEach(string.split(""), function(chr, index) {
		block.call(context, chr, index, string);
	});
};

// globally resolve forEach enumeration
var forEach = function(object, block, context) {
	if (object) {
		var resolve = Object; // default
		if (object instanceof Function) {
			// functions have a "length" property
			resolve = Function;
		} else if (object.forEach instanceof Function) {
			// the object implements a custom forEach method so use that
			object.forEach(block, context);
			return;
		} else if (typeof object == "string") {
			// the object is a string
			resolve = String;
		} else if (typeof object.length == "number") {
			// the object is array-like
			resolve = Array;
		}
		resolve.forEach(object, block, context);
	}
};

          x÷q   20230227191043-8l*   http://wiki.ros.org/custom/js/sorttable.js   B  /*
  SortTable
  version 2
  7th April 2007
  Stuart Langridge, http://www.kryogenix.org/code/browser/sorttable/
  
  Instructions:
  Download this file
  Add <script src="sorttable.js"></script> to your HTML
  Add class="sortable" to any table you'd like to make sortable
  Click on the headers to sort
  
  Thanks to many, many people for contributions and suggestions.
  Licenced as X11: http://www.kryogenix.org/code/browser/licence.html
  This basically means: do what you want with it.
*/

 
var stIsIE = /*@cc_on!@*/false;

sorttable = {
  init: function() {
    // quit if this function has already been called
    if (arguments.callee.done) return;
    // flag this function so we don't do the same thing twice
    arguments.callee.done = true;
    // kill the timer
    if (_timer) clearInterval(_timer);
    
    if (!document.createElement || !document.getElementsByTagName) return;
    
    sorttable.DATE_RE = /^(\d\d?)[\/\.-](\d\d?)[\/\.-]((\d\d)?\d\d)$/;
    
    forEach(document.getElementsByTagName('table'), function(table) {
      if (table.className.search(/\bsortable\b/) != -1) {
        sorttable.makeSortable(table);
      }
    });
    
  },
  
  makeSortable: function(table) {
    if (table.getElementsByTagName('thead').length == 0) {
      // table doesn't have a tHead. Since it should have, create one and
      // put the first table row in it.
      the = document.createElement('thead');
      the.appendChild(table.rows[0]);
      table.insertBefore(the,table.firstChild);
    }
    // Safari doesn't support table.tHead, sigh
    if (table.tHead == null) table.tHead = table.getElementsByTagName('thead')[0];
    
    if (table.tHead.rows.length != 1) return; // can't cope with two header rows
    
    // Sorttable v1 put rows with a class of "sortbottom" at the bottom (as
    // "total" rows, for example). This is B&R, since what you're supposed
    // to do is put them in a tfoot. So, if there are sortbottom rows,
    // for backwards compatibility, move them to tfoot (creating it if needed).
    sortbottomrows = [];
    for (var i=0; i<table.rows.length; i++) {
      if (table.rows[i].className.search(/\bsortbottom\b/) != -1) {
        sortbottomrows[sortbottomrows.length] = table.rows[i];
      }
    }
    if (sortbottomrows) {
      if (table.tFoot == null) {
        // table doesn't have a tfoot. Create one.
        tfo = document.createElement('tfoot');
        table.appendChild(tfo);
      }
      for (var i=0; i<sortbottomrows.length; i++) {
        tfo.appendChild(sortbottomrows[i]);
      }
      delete sortbottomrows;
    }
    
    // work through each column and calculate its type
    headrow = table.tHead.rows[0].cells;
    for (var i=0; i<headrow.length; i++) {
      // manually override the type with a sorttable_type attribute
      if (!headrow[i].className.match(/\bsorttable_nosort\b/)) { // skip this col
        mtch = headrow[i].className.match(/\bsorttable_([a-z0-9]+)\b/);
        if (mtch) { override = mtch[1]; }
	      if (mtch && typeof sorttable["sort_"+override] == 'function') {
	        headrow[i].sorttable_sortfunction = sorttable["sort_"+override];
	      } else {
	        headrow[i].sorttable_sortfunction = sorttable.guessType(table,i);
	      }
	      // make it clickable to sort
	      headrow[i].sorttable_columnindex = i;
	      headrow[i].sorttable_tbody = table.tBodies[0];
	      dean_addEvent(headrow[i],"click", function(e) {

          if (this.className.search(/\bsorttable_sorted\b/) != -1) {
            // if we're already sorted by this column, just 
            // reverse the table, which is quicker
            sorttable.reverse(this.sorttable_tbody);
            this.className = this.className.replace('sorttable_sorted',
                                                    'sorttable_sorted_reverse');
            this.removeChild(document.getElementById('sorttable_sortfwdind'));
            sortrevind = document.createElement('span');
            sortrevind.id = "sorttable_sortrevind";
            sortrevind.innerHTML = stIsIE ? '&nbsp<font face="webdings">5</font>' : '&nbsp;&#x25B4;';
            this.appendChild(sortrevind);
            return;
          }
          if (this.className.search(/\bsorttable_sorted_reverse\b/) != -1) {
            // if we're already sorted by this column in reverse, just 
            // re-reverse the table, which is quicker
            sorttable.reverse(this.sorttable_tbody);
            this.className = this.className.replace('sorttable_sorted_reverse',
                                                    'sorttable_sorted');
            this.removeChild(document.getElementById('sorttable_sortrevind'));
            sortfwdind = document.createElement('span');
            sortfwdind.id = "sorttable_sortfwdind";
            sortfwdind.innerHTML = stIsIE ? '&nbsp<font face="webdings">6</font>' : '&nbsp;&#x25BE;';
            this.appendChild(sortfwdind);
            return;
          }
          
          // remove sorttable_sorted classes
          theadrow = this.parentNode;
          forEach(theadrow.childNodes, function(cell) {
            if (cell.nodeType == 1) { // an element
              cell.className = cell.className.replace('sorttable_sorted_reverse','');
              cell.className = cell.className.replace('sorttable_sorted','');
            }
          });
          sortfwdind = document.getElementById('sorttable_sortfwdind');
          if (sortfwdind) { sortfwdind.parentNode.removeChild(sortfwdind); }
          sortrevind = document.getElementById('sorttable_sortrevind');
          if (sortrevind) { sortrevind.parentNode.removeChild(sortrevind); }
          
          this.className += ' sorttable_sorted';
          sortfwdind = document.createElement('span');
          sortfwdind.id = "sorttable_sortfwdind";
          sortfwdind.innerHTML = stIsIE ? '&nbsp<font face="webdings">6</font>' : '&nbsp;&#x25BE;';
          this.appendChild(sortfwdind);

	        // build an array to sort. This is a Schwartzian transform thing,
	        // i.e., we "decorate" each row with the actual sort key,
	        // sort based on the sort keys, and then put the rows back in order
	        // which is a lot faster because you only do getInnerText once per row
	        row_array = [];
	        col = this.sorttable_columnindex;
	        rows = this.sorttable_tbody.rows;
	        for (var j=0; j<rows.length; j++) {
	          row_array[row_array.length] = [sorttable.getInnerText(rows[j].cells[col]), rows[j]];
	        }
	        /* If you want a stable sort, uncomment the following line */
	        //sorttable.shaker_sort(row_array, this.sorttable_sortfunction);
	        /* and comment out this one */
	        row_array.sort(this.sorttable_sortfunction);
	        
	        tb = this.sorttable_tbody;
	        for (var j=0; j<row_array.length; j++) {
	          tb.appendChild(row_array[j][1]);
	        }
	        
	        delete row_array;
	      });
	    }
    }
  },
  
  guessType: function(table, column) {
    // guess the type of a column based on its first non-blank row
    sortfn = sorttable.sort_alpha;
    for (var i=0; i<table.tBodies[0].rows.length; i++) {
      text = sorttable.getInnerText(table.tBodies[0].rows[i].cells[column]);
      if (text != '') {
        if (text.match(/^-?[ï¿½$ï¿½]?[\d,.]+%?$/)) {
          return sorttable.sort_numeric;
        }
        // check for a date: dd/mm/yyyy or dd/mm/yy 
        // can have / or . or - as separator
        // can be mm/dd as well
        possdate = text.match(sorttable.DATE_RE)
        if (possdate) {
          // looks like a date
          first = parseInt(possdate[1]);
          second = parseInt(possdate[2]);
          if (first > 12) {
            // definitely dd/mm
            return sorttable.sort_ddmm;
          } else if (second > 12) {
            return sorttable.sort_mmdd;
          } else {
            // looks like a date, but we can't tell which, so assume
            // that it's dd/mm (English imperialism!) and keep looking
            sortfn = sorttable.sort_ddmm;
          }
        }
      }
    }
    return sortfn;
  },
  
  getInnerText: function(node) {
    // gets the text we want to use for sorting for a cell.
    // strips leading and trailing whitespace.
    // this is *not* a generic getInnerText function; it's special to sorttable.
    // for example, you can override the cell text with a customkey attribute.
    // it also gets .value for <input> fields.
    
    hasInputs = (typeof node.getElementsByTagName == 'function') &&
                 node.getElementsByTagName('input').length;
    
    if (node.getAttribute("sorttable_customkey") != null) {
      return node.getAttribute("sorttable_customkey");
    }
    else if (typeof node.textContent != 'undefined' && !hasInputs) {
      return node.textContent.replace(/^\s+|\s+$/g, '');
    }
    else if (typeof node.innerText != 'undefined' && !hasInputs) {
      return node.innerText.replace(/^\s+|\s+$/g, '');
    }
    else if (typeof node.text != 'undefined' && !hasInputs) {
      return node.text.replace(/^\s+|\s+$/g, '');
    }
    else {
      switch (node.nodeType) {
        case 3:
          if (node.nodeName.toLowerCase() == 'input') {
            return node.value.replace(/^\s+|\s+$/g, '');
          }
        case 4:
          return node.nodeValue.replace(/^\s+|\s+$/g, '');
          break;
        case 1:
        case 11:
          var innerText = '';
          for (var i = 0; i < node.childNodes.length; i++) {
            innerText += sorttable.getInnerText(node.childNodes[i]);
          }
          return innerText.replace(/^\s+|\s+$/g, '');
          break;
        default:
          return '';
      }
    }
  },
  
  reverse: function(tbody) {
    // reverse the rows in a tbody
    newrows = [];
    for (var i=0; i<tbody.rows.length; i++) {
      newrows[newrows.length] = tbody.rows[i];
    }
    for (var i=newrows.length-1; i>=0; i--) {
       tbody.appendChild(newrows[i]);
    }
    delete newrows;
  },
  
  /* sort functions
     each sort function takes two parameters, a and b
     you are comparing a[0] and b[0] */
  sort_numeric: function(a,b) {
    aa = parseFloat(a[0].replace(/[^0-9.-]/g,''));
    if (isNaN(aa)) aa = 0;
    bb = parseFloat(b[0].replace(/[^0-9.-]/g,'')); 
    if (isNaN(bb)) bb = 0;
    return aa-bb;
  },
  sort_alpha: function(a,b) {
    if (a[0]==b[0]) return 0;
    if (a[0]<b[0]) return -1;
    return 1;
  },
  sort_ddmm: function(a,b) {
    mtch = a[0].match(sorttable.DATE_RE);
    y = mtch[3]; m = mtch[2]; d = mtch[1];
    if (m.length == 1) m = '0'+m;
    if (d.length == 1) d = '0'+d;
    dt1 = y+m+d;
    mtch = b[0].match(sorttable.DATE_RE);
    y = mtch[3]; m = mtch[2]; d = mtch[1];
    if (m.length == 1) m = '0'+m;
    if (d.length == 1) d = '0'+d;
    dt2 = y+m+d;
    if (dt1==dt2) return 0;
    if (dt1<dt2) return -1;
    return 1;
  },
  sort_mmdd: function(a,b) {
    mtch = a[0].match(sorttable.DATE_RE);
    y = mtch[3]; d = mtch[2]; m = mtch[1];
    if (m.length == 1) m = '0'+m;
    if (d.length == 1) d = '0'+d;
    dt1 = y+m+d;
    mtch = b[0].match(sorttable.DATE_RE);
    y = mtch[3]; d = mtch[2]; m = mtch[1];
    if (m.length == 1) m = '0'+m;
    if (d.length == 1) d = '0'+d;
    dt2 = y+m+d;
    if (dt1==dt2) return 0;
    if (dt1<dt2) return -1;
    return 1;
  },
  
  shaker_sort: function(list, comp_func) {
    // A stable sort function to allow multi-level sorting of data
    // see: http://en.wikipedia.org/wiki/Cocktail_sort
    // thanks to Joseph Nahmias
    var b = 0;
    var t = list.length - 1;
    var swap = true;

    while(swap) {
        swap = false;
        for(var i = b; i < t; ++i) {
            if ( comp_func(list[i], list[i+1]) > 0 ) {
                var q = list[i]; list[i] = list[i+1]; list[i+1] = q;
                swap = true;
            }
        } // for
        t--;

        if (!swap) break;

        for(var i = t; i > b; --i) {
            if ( comp_func(list[i], list[i-1]) < 0 ) {
                var q = list[i]; list[i] = list[i-1]; list[i-1] = q;
                swap = true;
            }
        } // for
        b++;

    } // while(swap)
  }  
}

/* ******************************************************************
   Supporting functions: bundled here to avoid depending on a library
   ****************************************************************** */

// Dean Edwards/Matthias Miller/John Resig

/* for Mozilla/Opera9 */
if (document.addEventListener) {
    document.addEventListener("DOMContentLoaded", sorttable.init, false);
}

/* for Internet Explorer */
/*@cc_on @*/
/*@if (@_win32)
    document.write("<script id=__ie_onload defer src=javascript:void(0)><\/script>");
    var script = document.getElementById("__ie_onload");
    script.onreadystatechange = function() {
        if (this.readyState == "complete") {
            sorttable.init(); // call the onload handler
        }
    };
/*@end @*/

/* for Safari */
if (/WebKit/i.test(navigator.userAgent)) { // sniff
    var _timer = setInterval(function() {
        if (/loaded|complete/.test(document.readyState)) {
            sorttable.init(); // call the onload handler
        }
    }, 10);
}

/* for other browsers */
window.onload = sorttable.init;

// written by Dean Edwards, 2005
// with input from Tino Zijdel, Matthias Miller, Diego Perini

// http://dean.edwards.name/weblog/2005/10/add-event/

function dean_addEvent(element, type, handler) {
	if (element.addEventListener) {
		element.addEventListener(type, handler, false);
	} else {
		// assign each event handler a unique ID
		if (!handler.$$guid) handler.$$guid = dean_addEvent.guid++;
		// create a hash table of event types for the element
		if (!element.events) element.events = {};
		// create a hash table of event handlers for each element/event pair
		var handlers = element.events[type];
		if (!handlers) {
			handlers = element.events[type] = {};
			// store the existing event handler (if there is one)
			if (element["on" + type]) {
				handlers[0] = element["on" + type];
			}
		}
		// store the event handler in the hash table
		handlers[handler.$$guid] = handler;
		// assign a global event handler to do all the work
		element["on" + type] = handleEvent;
	}
};
// a counter used to create unique IDs
dean_addEvent.guid = 1;

function removeEvent(element, type, handler) {
	if (element.removeEventListener) {
		element.removeEventListener(type, handler, false);
	} else {
		// delete the event handler from the hash table
		if (element.events && element.events[type]) {
			delete element.events[type][handler.$$guid];
		}
	}
};

function handleEvent(event) {
	var returnValue = true;
	// grab the event object (IE uses a global event object)
	event = event || fixEvent(((this.ownerDocument || this.document || this).parentWindow || window).event);
	// get a reference to the hash table of event handlers
	var handlers = this.events[event.type];
	// execute each event handler
	for (var i in handlers) {
		this.$$handleEvent = handlers[i];
		if (this.$$handleEvent(event) === false) {
			returnValue = false;
		}
	}
	return returnValue;
};

function fixEvent(event) {
	// add W3C standard event methods
	event.preventDefault = fixEvent.preventDefault;
	event.stopPropagation = fixEvent.stopPropagation;
	return event;
};
fixEvent.preventDefault = function() {
	this.returnValue = false;
};
fixEvent.stopPropagation = function() {
  this.cancelBubble = true;
}

// Dean's forEach: http://dean.edwards.name/base/forEach.js
/*
	forEach, version 1.0
	Copyright 2006, Dean Edwards
	License: http://www.opensource.org/licenses/mit-license.php
*/

// array-like enumeration
if (!Array.forEach) { // mozilla already supports this
	Array.forEach = function(array, block, context) {
		for (var i = 0; i < array.length; i++) {
			block.call(context, array[i], i, array);
		}
	};
}

// generic enumeration
Function.prototype.forEach = function(object, block, context) {
	for (var key in object) {
		if (typeof this.prototype[key] == "undefined") {
			block.call(context, object[key], key, object);
		}
	}
};

// character enumeration
String.forEach = function(string, block, context) {
	Array.forEach(string.split(""), function(chr, index) {
		block.call(context, chr, index, string);
	});
};

// globally resolve forEach enumeration
var forEach = function(object, block, context) {
	if (object) {
		var resolve = Object; // default
		if (object instanceof Function) {
			// functions have a "length" property
			resolve = Function;
		} else if (object.forEach instanceof Function) {
			// the object implements a custom forEach method so use that
			object.forEach(block, context);
			return;
		} else if (typeof object == "string") {
			// the object is a string
			resolve = String;
		} else if (typeof object.length == "number") {
			// the object is array-like
			resolve = Array;
		}
		resolve.forEach(object, block, context);
	}
};

ÓÀÙ            +³ÛÑ      stIsIE     (_Íp	      sorttable      u`      init   SP¥      _timer     bPk      clearInterval      ¸O      document   DC      createElement      XFZ      getElementsByTagName   g      DATE_RE	    ³¨N+      ^(\d\d?)[\/\.-](\d\d?)[\/\.-]((\d\d)?\d\d)$
    ¶d      table      6CY>	      className      *÷Æ      \bsortable\b   ¬{¥      makeSortable   >¡øQ      thead      ¢Ë.      the    ­$~      appendChild    ÓQn$      rows   åLÉ2      insertBefore   ~Xßº
      firstChild     W·aa      tHead      ú_$f      sortbottomrows     .¥W      \bsortbottom\b     Øi      tFoot      ÅÑ :      tfo    ÅÖê      tfoot      ýý      headrow    g[×      cells      ÎÊú      \bsorttable_nosort\b   zq      mtch   ÀÙõ°      \bsorttable_([a-z0-9]+)\b      ¯Ê5O      override    «yé      sort_!      ÌËCë      sorttable_sortfunction"     T¿ÌU	      guessType#      <Ë      sorttable_columnindex$      Ó 1s      sorttable_tbody%    ëG      tBodies&    SQà      dean_addEvent'      ªâX      click(      2&p0      \bsorttable_sorted\b)   Æe=?      reverse*    åõ      sorttable_sorted+   ª'      sorttable_sorted_reverse,   ùúK      removeChild-    tÇ£      getElementById.     ¤AÔ      sorttable_sortfwdind/   >hh
      sortrevind0     ±4PB      span1   ÐÎ°      sorttable_sortrevind2   QÃ:	      innerHTML3      þÊ#      &nbsp<font face="webdings">5</font>4    é@Ñ      &nbsp;&#x25B4;5     ÓNÕÐ      \bsorttable_sorted_reverse\b6   ¡@i
      sortfwdind7     ¨Æ#      &nbsp<font face="webdings">6</font>8    sf      &nbsp;&#x25BE;9     ùñr      theadrow:   ¥_ÏÓ
      parentNode;     ³Ba
      childNodes<     sïa      cell=   'J¯(      nodeType>   y1)î       sorttable_sorted?      "LåÃ	      row_array@      P{ñ      colA    o%t      getInnerTextB   }Øã      sortC   "Õg      columnD     ÊâI      sortfnE     r¨<ý
      sort_alphaF     3Àµ      textG   °à      ^ - ? [ ýÿ$ ýÿ] ? [ \ d , . ] + % ? $ H     H`´      sort_numericI   H#Å      possdateJ   `~ß      firstK      µOU	      sort_ddmmL      QPD	      sort_mmddM      &`¡Ý      nodeN    íÇ	      hasInputsO      4>ôE      getAttributeP   FÚ×      sorttable_customkeyQ    bÈÅe      textContentR    Bl»H	      ^\s+|\s+$S      ­	v	      innerTextT      U5_      nodeNameU   RDo      toLowerCaseV    ©éÀ	      nodeValueW      §v      tbodyX      Å8      newrowsY    ä´°å      [^0-9.-]Z   .è1·      dt1[    unú      dt2\    fî¼:      shaker_sort]    ãÈÅ      list^   wU	      comp_func_      VOIÅ      swap`    rO      addEventListenera   KjH      DOMContentLoadedb   bó¢      WebKitc     ¹ã+	      navigatord      	      userAgente      ì       setIntervalf    <í þ      loaded|completeg    ¹U
      readyStateh     ø2      windowi     Ä{p      onloadj     Z`      handlerk    ²ý A      $$guidl     Dô      guidm   Qò(      eventsn     AQ
      handlerso   PA1(      handleEventp    Æý      removeEventq    ]ü      removeEventListenerr    II·P      events      !'È      returnValuet    ®      fixEventu   ðJ      ownerDocumentv      Ýîä      parentWindoww   e!k      $$handleEventx      B9ºÀ      preventDefaulty     õ/F/      stopPropagationz    É E      cancelBubble{   ð1      array|      àû      block}      ¹©±Ó      context~    Bü¿;      key    nø`      chr    ÐÒMÆ      init/<     ÐÍ      makeSortable/<     «¹±j      makeSortable/</<   6      _timer<    ]aö      fixEvent.preventDefault    Quâ      fixEvent.stopPropagation   ê#      Array.forEach      Ä|ó¾      Function.prototype.forEach     JÒ      String.forEach     ÉB}      String.forEach/<        =                  ï%,                                                                                                                                                                                                                                                   	                  
                                                                                                                                                                                                          ³Oc            P  P&  Ðp  Ðo  Ðt  Ð  `            q   Ä  j  n               q   Ä  j              r  s  n  i  o                r                	                
               
  Pi `	  `o  `k  `             e `j `	  `o  `k  `             <              
  C  i              M  S  i               W  Pi `	  `o  `k  `             a  b               a  b               a  b               a  b              ]  ^  b  t  _  i  q                                o                 o               {  |  }  i                 |  }  ~  o                 `|  P}  P               Ù                  |  }  y  ¯Â0°	                              (      5      G      R     R     R     R     R     R     Y     Y     b     f      Iô$KE®ú                
   2        "  A  )  H  E  K  L  \  &Õª!«!         ¡                6        Ð   ±   À   Õ±   7   j   :	   j
   :   j   :   j   :   j   :   j   :   j   :   j   :   j   :   j   :   À   Õ´   H   *      ´   ×H   Ú   ´   H	   t Õ   i   ×H    Ú´!   H"   p %      ±#   ´$    j%   
p À#   Õ    ´&   ´   H	   J'   Õ´(   J)   Õ´*   j+   J,   Õ´*   j-   J.   Õ´/   H0      -   ´/   j1   J0   Õ/   ´2   H3   j4   J0   Õ´5   j6   J0   Õ±0   j7   À0   Õ¡E%`PG`P: J) J  ¥ J  Æ J  ó J  J 	 J  J  J - @ T `P0 `P 	PI e `P 
P=%`P;000B f PN n`P@ 00`PL @ ¨@ ¯0`P000`P@ ¿ `P0 `P@ È`P@ Ñ`P@ Ø%`PK íP  8  8  Ã                        ÒÃ   Õ¶   H   H             ¶   H   J   Õ´         ´    ´   t Õ
   ´   H         Õ´   H                ´   i	   J
   Õ´    ´   ×H   Ú   p j   t Õ¡F `P `PA F `P@ `P/`P+PI `P   `PA F
 `P@ `P P(ÿÿÿöPD P   x   x   =                         µ  H   ×H   Úi   p ÿ      ´   ×H   Úµ  t Õ   ¡0 
`P P0 `P/
PI P      p  *                      ÒÄ   ÕÔÄ   Õ3Ä   Õ·   ×H   Ú   p H   d      ±   ´   ×H   Ú   p À   Õ´   ×H   Ú·   H   It Õ·   ×H	   Ú´   ·   H
   t Õ   ·   H   +      ·   ·   ×H   Ú   p IJ   Õ   ·   H   H   H             ±   e    À   ÕÄ   Õ"   ·   ·   H   H   s   &   ·   H   ·   IH   ×H   Úi   p ÿ+   -   ´   ´   H   ·   H   ·   ILÕ3   ·   .'Ä   Õwÿÿÿ5   ´   ¸   7   ·   H   >   :   ±   ´   ×H   Ú   p À   Õ·   ×H   Ú´   t ÕB   Ä   ÕB   ·   ´   H   7   F   ´   ×H   Ú´   ·   It Õ·   .'Ä   Õ¸ÿÿÿM   Ñ   ÕM   ±   ·   H   H   IH   À   ÕÄ   ÕS   ·   ´   H   ~  W   ´   ·   IH   ×H   Úi   p >  ]   ±   ´   ·   IH   ×H   Úi   p À   Õ´      f   ±   ´   IÀ   Õj   ´   #   l   Õ´      ´   %I   r   1   s   ´   ·   I´      ´   %IJ   Õ4   z   ´   ·   I´   ×H   Ú·   ·   p J   Õ   ´   ·   I·   J   Õ´   ·   I·   H    IJ!   Õ´"    ´   ·   I#   j$   t Õ   ·   .'Ä   Õqþÿÿ   ¡0 `P P@ `P P9 `P P4 `P PI	 `P `P P@ `P  `PAz F `P0 	 `P'fP0 
`P¡ P0 `P¦@ '`P@ `P? 
`P@ `P P9 `P PI  `P'fP0 `P PD -`P@  `PK$ `P¡0 	 `P'fP@' 
`P P= `P¡ P9 `P/`P0 `P §0 	`P¬00 	`P¡ .PN0 `P0 `P0 `P PI% $`P@z P                            M              ¨    ß                ¢      ÒÄ   ÕÔÄ   Õ3Ä   Õ·   H   ×H   Úi   p ÿê      ´   ×H   Ú·   H   t Õ·   ·   H   ×H   Ú   	   p J   Õ·   ×H
   Ú´   ×H   Ú   p t Õ±   ´   ×H   Ú   p À   Õ´      J   Õ´   ´                        J   Õ·   ×H   Ú´   t Õ     ·   H   ×H   Úi   p ÿê   %   ´   ×H   Ú·   H   t Õ·   ·   H   ×H   Ú	      p J   Õ·   ×H
   Ú´   ×H   Ú   p t Õ±   ´   ×H   Ú   p À   Õ´      J   Õ´   ´      <         <      <   J   Õ·   ×H   Ú´   t Õ @   ±   ·   H   À   Õ´    ´   H   j    t Õ±   ´   ×H   Ú   p À   Õ´   $   N   ´   H   ×H
   Ú´   t ÕS   ±   ´   ×H   Ú   p À   Õ´   $   Z   ´   H   ×H
   Ú´   t Õ_   ·   ×H   !   %J   Õ±   ´   ×H   Ú   p À   Õ´      J   Õ´   ´      l         l      l   J   Õ·   ×H   Ú´   t Õ±"   e    À"   Õ±#   ·   H$   À#   Õ±%   ·   H   H%   À%   ÕÄ   Õz   ·   ´%   H&   l   ~   ´"   ´"   H&   e   ´   ×H'   Ú´%   ·   IH(   ´#   Ip f    ´%   ·   If   LÕ·   .'Ä   Õÿÿÿ   ´"   ×H)   Ú·   H*   t Õ±+   ·   H   À+   ÕÄ   Õ   ·   ´"   H&   9      ´+   ×H   Ú´"   ·   IIt Õ·   .'Ä   Õ¶ÿÿÿ¢   Ñ"   Õ¡@ `P P@ `P 
P4 `P0E ,PI `P P#ÿÿÿëP4 `P P9 `P0 `P³0 `P P4 `PAE F `P P@ `P 
P4 `P0E ,PI `P P#ÿÿÿëP4 `P P9 `P0 `P³0 `P P4 `PAE F 
`P0 
`P PD% 
`P P9 `P/`P P9 
`P P9 `P/`P PI* 
`P7 
`P P9 
`P0 
`P³0 
`P PD4 	`P0 	`P0 	`P0  `P'fP0 `P ¢ 
P("@7 &`P@= 	`P 
PD? 	`P0  `P'fP0 `P PD@ +`P@D 	`P6 P    ¨         Ç              O   ¤   ¤   d                         µ  H   T      µ  µ  H   ×H   Ú      p J   Õµ  µ  H   ×H   Ú      p J   Õ   ¡0 `P0 `P  P9 `P  PN 
P  t  d  ¬                D      ±   ´   H   À   ÕÃ   Õ   ¶   µ  H   IH   H   f  
   ±   ´   ×H   Úµ  H   IH   ¶   IH	   µ Ip À   Õ´   
        ´   ×H   Úi   p       ´   H      ±   ´   ×H   Ú´   H   p À   Õ´   ¤   '   ±   ´    ´   Ip À   Õ±   ´    ´   Ip À   Õ´      6   ´   H   F   8   ´      ;   ´   H      =   ±   ´   H   À   ÕA   ¶   .'Ã   ÕþÿÿC   ´   ¡@ `P0 	 `P&fP£0 `P® P9 
`P0 `P P= 
`PJ F `P P9 `PO 
`P P9 
`P 	P9 `P@ `PJ K `P0 `PJ K@ `P@ 2`P@ `P5 Q   t              ä  Ô  Î                K      ±   µ  H      "      Õµ  ×H   Ú   p H      À   Õµ  ×H   Ú   p "      µ  ×H   Ú   p V     µ  H   	         Õ´      ,      µ  H   ×H
   Úi      p       µ  H   	         Õ´      ,       µ  H   ×H
   Úi      p ª  #   µ  H   	      '   Õ´   )   ,   *   µ  H   ×H
   Úi      p T  -   µ  H   ×8   /   ×n   0   ×   1   ×z   2      2   µ  H   ×H   Úp     '   7   µ  H   ×H
   Úi      p :   µ  H   ×H
   Úi      p     =      Ã   ÕÃ  Õ=   ¶  µ  H   H   @   A   ¶   ´   ×H   Úµ  H   ¶  Ip %Ã   Õ¶  .'Ã  Õ­ÿÿÿI   ¶   ×H
   Úi      p    K      K   ¡@ `P%0/P@
 `P/P? `P/PC+ K `P *0 `P PC+ K `P (0 `P PC+ K `P #0 `P PC+ K0 `PÉ00 `P/P0 `P PC+ F0 
`P PC+ A 
`P:00 `P:  `P&fP0 `P PF" 6`P@% 
`P PC+ A& 
`P:0 
`PE+ V  ä         B  X   |  \  ë                       ÒÄ   ÕÔÄ   Õ3Ä   Õ±   e    À   ÕÄ   Õ   ·   ·   H   H   =      ´   ´   H   ·   H   ·   ILÕ·   .'Ä   Õ­ÿÿÿ   ´   H   &Ä   Õ   ·   7      ·   ×H   Ú´   ·   It Õ·   .(Ä   ÕÁÿÿÿ   Ñ   Õ¡@ `P0 	 `P'fP0 `P¡@ '`P@ 	 `P fP0 `P PD '`P@	 `P6 P   |         ,   X             D       ¹                         ±   ´    µ  I×H   Úi      p p À   Õ´    ´   p       ±   À   Õ   ±   ´    µ I×H   Úi      p p À   Õ´    ´   p       ±   À   Õ   ´   ´   &¡0 `P¡ P#ÿÿÿðP9 `P+P-`P0 `P¡ P#ÿÿÿðP9 `P+P-`P0 `P; Q       <                         µ  Iµ I         µ  Iµ I      ÿ   ¡0 `P `PA F `P `PB F `P1 Q    ¤  ¤  ð                 \       ±   µ  I×H   Ú´   H   p À   Õ±   ´   IÀ   Õ±   ´   IÀ   Õ±   ´   IÀ   Õ´   H          ±   	   ´   %À   Õ   ´   H          ±   	   ´   %À   Õ#   ±
   ´   ´   %´   %À
   Õ±   µ I×H   Ú´   H   p À   Õ±   ´   IÀ   Õ±   ´   IÀ   Õ±   ´   IÀ   Õ´   H       A   ±   	   ´   %À   ÕE   ´   H       I   ±   	   ´   %À   ÕM   ±   ´   ´   %´   %À   Õ´
   ´      X   X   ´
   ´      \   ÿ\   ¡0 `P P9 `P `P `P0 `P `P0 `P `P0 `P0 `P P9 `P `P `P0 `P `P0 `P `P0 `P0 `P 
`PA F `P 	`PB F `P1 Q  ¤  ¤  ð                 \       ±   µ  I×H   Ú´   H   p À   Õ±   ´   IÀ   Õ±   ´   IÀ   Õ±   ´   IÀ   Õ´   H          ±   	   ´   %À   Õ   ´   H          ±   	   ´   %À   Õ#   ±
   ´   ´   %´   %À
   Õ±   µ I×H   Ú´   H   p À   Õ±   ´   IÀ   Õ±   ´   IÀ   Õ±   ´   IÀ   Õ´   H       A   ±   	   ´   %À   ÕE   ´   H       I   ±   	   ´   %À   ÕM   ±   ´   ´   %´   %À   Õ´
   ´      X   X   ´
   ´      \   ÿ\   ¡0 `P P9 `P `P `P0 `P `P0 `P `P0 `P0 `P P9 `P `P `P0 `P `P0 `P `P0 `P0 `P 
`PA F `P 	`PB F `P1 Q    X                  (      Ã   Õµ  H   &Ã  ÕÃ  Õ   ¶  o     Ã  Õ¶   Ã  Õ   ¶  ¶  y      µ  µ  ¶  Iµ  ¶  %Ip ?      µ  ¶  IÃ  Õµ  ¶  µ  ¶  %ILÕµ  ¶  %¶  LÕÃ  Õ   ¶  .'Ã  Õ}ÿÿÿ   ¶  .(Ã  Õ¶        °      ¶  Ã  Õ   ¶  ¶   y      µ  µ  ¶  Iµ  ¶  &Ip ?      µ  ¶  IÃ  Õµ  ¶  µ  ¶  &ILÕµ  ¶  &¶  LÕÃ  Õ$   ¶  .(Ã  Õ}ÿÿÿ&   ¶   .'Ã   Õþÿÿ(   ¡@ `P6 `P? `PF 
fP> `P6  `P)fP0 `P 	P? `P-	`P `P? `PK
 `P@ `PK `P.`PJ  `P)fP0 `P 	P? `P-	`P `P? `PK `P@ `P@ P            >             ÷                y  t   t   9                          i   ×H   Ú´   H   p       ´   ×H   Út  Õ   ¡0 `P P= `P,
PI P                        !       µ  H   $      µ  ×H   Úµ µ t Õî      µ H   )      µ ´   ×H   .×Ü'J   ÕJ   Õ   µ  H         µ  7   J   Õ   µ  H   µ IÃ   Õ¶   K      µ  H   µ 7   LÃ   Õµ     µ %I      ¶   µ     µ %ILÕ   ¶   µ H   µ LÕµ     µ %´	   LÕ!   ¡0 `P0 `P P>@ `P `P¤@ `P `P@	 `P0 `P> `P@ `P0 `P@ `P@ `P@P    À   À   {                         µ  H   $      µ  ×H   Úµ µ t ÕN      µ  H         Õµ  H   µ I       	   µ  H   µ Iµ H   PÕ   ¡0 `P0 `P P>@ `P®0 `P@	P    t  d  û         	             ÔÃ  ÕÃ   Õµ  d      Õ´    ¶  H   #      Õ¶  H         Õ¶     H         Õ´   	   H   p    Â  Õ¶  H   µ  H   IÃ  Õ¶  \   ]^O      Ã  ¶  ¶  ¶  IJ	   Õ¶  ×H	   Úµ  p       Ã   Õ   Õ®ÿÿÿ   _¶   ¡6 `PF `Pä PL `P@ `P ÿÿÿ÷4 `P0 `P.P? `PK L `P4Q   t           W   d   d   +                         µ  ´   H   J   Õµ  ´   H   J   Õµ  ¡@ `P0 `P0 `P3Q    <   <                           ÔÃ   Õ¶   J   Õ¡6 `P;P  <   <                           ÔÃ   Õ¶   J   Õ¡6 `P;P  °       Y                       Ã   Õ    ¶   µ  H   :      µ ×H   Úµ µ  ¶   I¶   µ  t Õ¶   .'Ã   Õ¸ÿÿÿ   ¡0  `P&fP0 `P PD $`P@ P °             M   È   ¸   q         
       
      ÔÃ  Õµ  \   ]^X      Ã   ¶  H   ¶   I   *      µ ×H   Úµ µ  ¶   I¶   µ  t Õ
   Õ¥ÿÿÿ
   _¡6 `P ÿÿÿõ4 `P0 `P PI LP È         
   `   `   `   *                         ´   ×H   Ú·   ×H   Ú   p j   t Õ¡0 `P P(ÿÿÿñPDP   P   P   !                         ·   ×H   Ú·   µ  µ ·   t Õ¡0 `P P4 P \  \  ä                        µ  Û      ´   Ã   Õµ  ´          ´   Ã   Õ      µ  H   ´    %   
   µ  ×H   Úµ µ t Õ U      µ           ´   Ã   Õ-      µ  H            ´   Ã   Õ   ¶   ×H   Úµ  µ µ t Õ   ¡0 `P= `P: `P@ `P0 `P@ `P P4 `PAK
 `P@ `P0 `P@ `PO `P PIP  3õØ  ``  k  &  l  m     @  @ o    `q  m  k    `t  u    v  h  r  m  Ä  w    `t  x  y    `  W    P      `3   e                  P     
    p	  `=    V  +  t   *    `  W    P  )  $  V  *  +  ,    -  .  /    0  1      3  4  2      P6  7  8  9  :     ;    p>  ?  @  #      A    B  !  K   `                          W    P          U    P    P         !  "  #  %  $  &  '    p
  `D    E  %      F  A    t   U    PH  I    J  X    K  L    `N      é     O  P  Q  ÿ  V    Pt   S  	  PF  
  P=  T  U  ã    PV    P;    A    P  `X          ` W  V    Pt   ÷   Ë   P  `  `  U      y  m  d    0  Z  [    `  U      y  d  m    0  Z  [    `    `  P«    g        `s    `z    `  1     `g  ÿ  1     `1     `
     Z  t     p  `  	             
     `  p  p  p  p       @  p    p    p"    pA    p)  	  pH  
  pE    pK    pL    p\    `  a    P«  c  d    e    ph  i  &  l  t    px    py  
       p	  g    p    p  pÿX  8              "             
               c   %          
 7   ,           0                    "       
       A       
 ¹      )       
 ¾   	   H       
 Ç      E       
 È      K       
 Ô      L       
 à      \       
 â                  
   &         
      p            
   o               t         é              ë              í              ð              ö              ô              ü   	           
 H©À      B      B                  1    )                            "   <          .¬  >  ¤  >  *             .e  +  ]  +  \   1            í  ç  å  ç  {   /            X  Æ  P  Æ  ¦               ã  &  Û  &  Ç             .&  ,'  &  ,'  ô               »'  u(  ³'  u(                (  â(  (  â(  
              ù(  *  ñ(  *                µ*  Z,  ­*  Z,                v,  /  n,  /  .              3  3   3  3  g  %             4  ®7  k4  ®7  v              8  9  ð7  9               39  ;  9  ;                /;  Ð;  ;  Ð;  «             ô;  <  ì;  <  ±  "            :<  \<  2<  \<  ´  #             |=  ó=  t=  ó=  Á             4>  ×>  ,>  ×>  É  %          ?  ?  ?  ?  Ò              P?  ?  H?  ?  Ó  )            Ñ?  B  É?  B  Ù            5¡Ý/3û,(<×w      'dÂdÂEY­d
½ù   O    O^partitionKey=%28http%2Cros.org%29,:http://wiki.ros.org/custom/js/sorttable.js necko:classified 1 strongly-framed 1 request-method GET response-head HTTP/1.1 200 OK
Last-Modified: Fri, 15 Nov 2013 22:39:46 GMT
ETag: "4215-4eb3ee00ff7be"
Accept-Ranges: bytes
Content-Length: 16917
Content-Type: application/javascript
Date: Fri, 03 Mar 2023 05:19:53 GMT
Server: Apache
 original-response-headers Date: Wed, 01 Feb 2023 07:15:27 GMT
Server: Apache
Last-Modified: Fri, 15 Nov 2013 22:39:46 GMT
ETag: "4215-4eb3ee00ff7be"
Accept-Ranges: bytes
Content-Length: 16917
Keep-Alive: timeout=5, max=100
Connection: Keep-Alive
Content-Type: application/javascript
 ctid 2 uncompressed-len 0 net-response-time-onstart 329 net-response-time-onstop 479 alt-data 1;16917,javascript/moz-script-bytecode-20230227191043-8l alt-data-from-child 1   Ð4